buildscript {
    dependencies {
        classpath "org.jacoco:org.jacoco.core:0.8.12"
        classpath "org.jacoco:org.jacoco.agent:0.8.12"
    }
}
plugins {
    id 'java'
    id 'project-report'
    id 'jacoco'
}

description = 'quizard-engine'
group = 'za.co.mkhungo.quizard'
version = '0.0.1-SNAPSHOT'


java{
    withSourcesJar()
    withJavadocJar()
}

allprojects {
    group = 'za.co.mkhungo.quizard'
    version = '0.0.1-SNAPSHOT'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'project-report'
    apply plugin: 'jacoco'

    java {
        withSourcesJar()
        withJavadocJar()
    }

    repositories {
        // Use Maven Central for resolving dependencies.
        mavenCentral()
    }

    dependencies {

        implementation(group: 'org.springframework', name: 'spring-core', version: '6.1.11') {
            exclude(module: 'commons-logging')
        }
        implementation (group: 'org.springframework',name :'spring-aop',version :'6.1.11'){
            exclude(module: 'commons-logging')
        }
        implementation (group :'org.springframework',name:'spring-aspects',version:'6.1.11'){
            exclude(module: 'commons-logging')
        }
        implementation(group: 'org.springframework', name: 'spring-context', version: '6.1.11') {
            exclude(module: 'commons-logging')
        }
        implementation(group: 'org.springframework', name: 'spring-beans', version: '6.1.11') {
            exclude(module: 'commons-logging')
        }
        implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
        implementation (group: 'org.apache.logging.log4j',name:'log4j-core',version: '2.20.0'){
            exclude(module: 'mail')
            exclude(module: 'jms')
            exclude(module: 'jmxtools')
            exclude(module: 'jmxri')
        }
        implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.23.1'
        implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.7'

        implementation group: 'org.slf4j', name: 'jcl-over-slf4j', version: '2.0.7'
        implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '2.0.7'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.3'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter', version: '5.10.3'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.10.3'
        testImplementation group: 'org.springframework', name: 'spring-test', version: '6.1.10'
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.10.3'
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.12.0'
        testImplementation 'org.jacoco:org.jacoco.agent:0.8.12'

        compileOnly 'org.projectlombok:lombok:1.18.30'
        annotationProcessor 'org.projectlombok:lombok:1.18.30'

        testCompileOnly 'org.projectlombok:lombok:1.18.30'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    }

    htmlDependencyReport {
        projects = project.allprojects
    }


    jacoco {
        toolVersion = "0.8.12"
        // reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
    }
    test {
        finalizedBy jacocoTestReport // report is always generated after tests run
    }

    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        group = "reporting"
        description = "Generate Jacoco coverage reports after running tests."
        /*reports {
            xml.enabled true
            html.enabled true
            csv.enabled false
            html.destination
        }*/
        //sourceDirectories = fileTree(dir: 'src/main/...')
    }
}

htmlDependencyReport {
    projects = project.allprojects
}


jacoco {
    toolVersion = "0.8.12"
    // reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    /*reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        html.destination //"${buildDir}/jacocoHtml"
    }*/
    sourceDirectories = fileTree(dir: './')
}